name: Cpp application

on:
  push:
    branches: [ "main" ]
  pull_request:
    paths:
      - app_cpp/**
      - .github/workflows/cpp-app.yml
    branches: [ "main" ]

permissions:
  contents: read

defaults:
  run:
    working-directory: ./app_cpp

jobs:
  test:
    name: Test application
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'
  
      - name: Update apt
        run: |
          sudo apt-get update

      - name: Install Boost Deps
        run: |
            sudo apt-get install -y --no-install-recommends \
            build-essential \
            autoconf \
            automake \
            libtool \
            pkg-config \
            ca-certificates \
            libssl-dev \
            wget \
            git \
            curl \
            language-pack-en \
            locales \
            locales-all \
            vim \
            gdb \
            valgrind \
            cmake && \
            sudo apt-get clean 
      
      - name: Cache Boost
        id: cache-boost-lib
        uses: actions/cache@v3
        with:
          path: |
            /usr/local/lib/
            /usr/local/include/boost/
          key: ${{ runner.os }}-boost-${{ env.BOOST_VERSION }}
          restore-keys: ${{ runner.os }}-boost-
      
      - name: Set boost lib
        if: steps.cache-boost-${{ env.BOOST_VERSION }}.outputs.cache-hit != 'true'
        run: |
            cd /tmp && \
            BOOST_VERSION=1.83.0 && \
            BOOST_VERSION_MOD=$(echo ${BOOST_VERSION} | tr . _) && \
            sudo wget https://boostorg.jfrog.io/artifactory/main/release/${BOOST_VERSION}/source/boost_${BOOST_VERSION_MOD}.tar.bz2 && \
            sudo tar --bzip2 -xf boost_${BOOST_VERSION_MOD}.tar.bz2 && \
            cd boost_${BOOST_VERSION_MOD} && \
            sudo ./bootstrap.sh --prefix=/usr/local && \
            sudo ./b2 install && \
            sudo rm -rf /tmp/*
  
      - name: Build tests
        run: |
          cmake -Bbuild -Hsrc -DCMAKE_BUILD_TYPE=Release -DTESTING=TRUE && cmake --build build

      - name: Test with unittest
        run: |
          ./build/Test/hello_test

  # container:
  #   needs: [test]
  #   name: Docker-container
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_ACCESS_TOKEN }}
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v1
  #     - name: Build and push
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: app_cpp
  #         file: app_cpp/Dockerfile
  #         push: true
  #         tags: muurrk/myapp_cpp:latest
  #         cache-from: type=registry,ref=muurrk/myapp_cpp:buildcache
  #         cache-to: type=registry,ref=muurrk/myapp_cpp:buildcache,mode=max

  
  # snyk-docker:
  #   runs-on: ubuntu-latest
  #   needs: [container]
  #   steps:
  #     - uses: actions/checkout@master
  #     - name: Run Snyk to check Docker image for vulnerabilities
  #       uses: snyk/actions/docker@master
  #       continue-on-error: true
  #       env:
  #         SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  #       with:
  #         image: muurrk/myapp:latest
  #         args: --file=app_python/Dockerfile --sarif-file-output=snyk.sarif
  #     - name: Upload result to GitHub Code Scanning
  #       uses: github/codeql-action/upload-sarif@v2
  #       with:
  #         sarif_file: snyk.sarif